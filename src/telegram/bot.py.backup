"""
Telegram Bot for BhoomiSetu Agricultural AI Agent
Handles user interactions via Telegram messaging
"""

import os
import logging
import asyncio
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters, 
    ContextTypes
)
from dotenv import load_dotenv
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from agents.agri_agent import agri_agent

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.user_sessions = {}  # Store user context
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        user_id = user.id
        
        # Initialize user session
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        
        welcome_message = f"""
🌾 **Welcome to BhoomiSetu, {user.first_name}!** 🌾

I'm your AI-powered agricultural advisor. I can help you with:

🌱 **Crop Management**
• When to irrigate your crops
• Which seed varieties to choose
• Pest and disease identification
• Fertilizer recommendations

🌤️ **Weather Information**
• Real-time weather updates
• 5-day forecasts
• Rainfall predictions
• Agricultural alerts

💰 **Market Intelligence**
• Current commodity prices
• Price trends and forecasts
• Best markets to sell
• Seasonal price patterns

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        user_id = user.id
        
        # Initialize user session
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        
        welcome_message = f"""
� **Welcome to BhoomiSetu, {user.first_name}!** 🌾

I'm your AI-powered agricultural advisor. I can help you with:

🌱 **Crop Management**
• When to irrigate your crops
• Which seed varieties to choose
• Pest and disease identification
• Fertilizer recommendations

🌤️ **Weather Information**
• Real-time weather updates
• 5-day forecasts
• Rainfall predictions
• Agricultural alerts

💰 **Market Intelligence**
• Current commodity prices
• Price trends and forecasts
• Best markets to sell
• Seasonal price patterns

�🏛️ **Government Schemes**
• Agricultural loans and subsidies
• Insurance schemes
• Direct benefit transfers
• How to apply for schemes

📍 **To get personalized advice for your area, I need your location first.**
        """
        
        # Send welcome message
        await update.message.reply_text(welcome_message, parse_mode='Markdown')
        
        # Immediately ask for location
        await self.ask_for_location(update, context)

    async def ask_for_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ask user for their location"""
        from telegram import KeyboardButton, ReplyKeyboardMarkup
        
        keyboard = [[KeyboardButton("📍 Share My Location", request_location=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        location_message = """
🌍 **Share Your Location**

To provide accurate weather forecasts and local market prices, please share your location:

1️⃣ **Tap the button below** to share your current GPS location
2️⃣ **Or type your city**: `/location Mumbai`

This helps me give you:
• 🌤️ Local weather forecasts
• 💰 Nearby market prices
• 🌾 Region-specific farming advice
        """
        
        await update.message.reply_text(
            location_message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
                InlineKeyboardButton("💳 Schemes", callback_data="schemes")
            ],
            [
                InlineKeyboardButton("📍 Set Location", callback_data="set_location"),
                InlineKeyboardButton("ℹ️ Help", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
🔧 **BhoomiSetu Commands:**

*Basic Commands:*
/start - Welcome message and main menu
/help - Show this help message
/location [city] - Set your location
/crop [crop_name] - Set your current crop
/weather [city] - Get weather forecast
/prices [commodity] - Get market prices

*Quick Tips:*
• Ask questions in any language
• Be specific about your location for better advice
• Mention your crop type for targeted guidance
• Ask about government schemes and subsidies

*Example Questions:*
• "मुझे अपने धान की फसल कब सिंचाई करनी चाहिए?"
• "What fertilizer should I use for wheat?"
• "తెల్లవారుజామున వాతావరణం ఎలా ఉంటుంది?"
• "Can I get a loan for buying seeds?"

Just type your question and I'll help you! 🌾
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def set_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /location command"""
        user_id = update.effective_user.id
        
        if context.args:
            location = ' '.join(context.args)
            
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = {}
            
            self.user_sessions[user_id]['location'] = location
            
            # Get weather for the location to verify
            try:
                weather_data = await agri_agent.get_weather_data(location)
                if "error" not in weather_data:
                    current = weather_data.get("current", {})
                    await update.message.reply_text(
                        f"📍 Location set to: **{location}**\n\n"
                        f"Current weather:\n"
                        f"🌡️ {current.get('temperature', 'N/A')}°C\n"
                        f"🌤️ {current.get('description', 'N/A')}\n"
                        f"💧 Humidity: {current.get('humidity', 'N/A')}%",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"📍 Location set to: **{location}**\n"
                        f"⚠️ Could not fetch weather data. Please check the spelling.",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"Location setting error: {e}")
                await update.message.reply_text(
                    f"📍 Location set to: **{location}**",
                    parse_mode='Markdown'
                )
        else:
            # Ask for location sharing
            from telegram import KeyboardButton, ReplyKeyboardMarkup
            keyboard = [[KeyboardButton("📍 Share My Location", request_location=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            
            await update.message.reply_text(
                "Please provide your location in one of these ways:\n\n"
                "1️⃣ **Share your current location** by tapping the button below\n"
                "2️⃣ **Type your city name**: `/location Mumbai`\n\n"
                "This helps me provide accurate weather and market information for your area.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle shared location from Telegram"""
        user_id = update.effective_user.id
        location = update.message.location
        
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {}
        
        # Store coordinates
        self.user_sessions[user_id]['coordinates'] = {
            'latitude': location.latitude,
            'longitude': location.longitude
        }
        
        # Get city name from coordinates
        try:
            import requests
            api_key = os.getenv('OPENWEATHER_API_KEY', '9f842d56fca036534c0a651a6dd6f6fb')
            url = f"http://api.openweathermap.org/geo/1.0/reverse?lat={location.latitude}&lon={location.longitude}&limit=1&appid={api_key}"
            
            response = requests.get(url)
            data = response.json()
            
            if data and len(data) > 0:
                city_name = data[0].get('name', 'Unknown')
                state = data[0].get('state', '')
                country = data[0].get('country', '')
                
                self.user_sessions[user_id]['location'] = city_name
                
                # Get weather for confirmation
                weather_data = await agri_agent.get_weather_data(city_name)
                
                # Remove location sharing keyboard
                from telegram import ReplyKeyboardRemove
                
                if "error" not in weather_data:
                    current = weather_data.get("current", {})
                    await update.message.reply_text(
                        f"📍 **Location detected:** {city_name}, {state}\n\n"
                        f"🌤️ **Current Weather:**\n"
                        f"🌡️ Temperature: {current.get('temperature', 'N/A')}°C\n"
                        f"☁️ Conditions: {current.get('description', 'N/A')}\n"
                        f"💧 Humidity: {current.get('humidity', 'N/A')}%\n"
                        f"💨 Wind: {current.get('wind_speed', 'N/A')} m/s\n\n"
                        f"✅ Location saved! Now I can provide weather and market information for your area.",
                        reply_markup=ReplyKeyboardRemove(),
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"📍 **Location detected:** {city_name}, {state}\n"
                        f"✅ Location saved for personalized advice!",
                        reply_markup=ReplyKeyboardRemove(),
                        parse_mode='Markdown'
                    )
                    
        except Exception as e:
            logger.error(f"Location processing error: {e}")
            await update.message.reply_text(
                f"📍 Location received! Coordinates: {location.latitude:.4f}, {location.longitude:.4f}\n"
                f"✅ I'll use this for weather and market information.",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )

    async def set_crop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /crop command"""
        user_id = update.effective_user.id
        
        if context.args:
            crop = ' '.join(context.args).lower()
            
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = {}
            
            self.user_sessions[user_id]['crop_type'] = crop
            
            await update.message.reply_text(
                f"🌱 Crop set to: **{crop.title()}**\n\n"
                f"Now I can provide specific advice for your {crop} farming!",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "Please specify your crop. Example: `/crop rice` or `/crop wheat`",
                parse_mode='Markdown'
            )

    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /weather command"""
        user_id = update.effective_user.id
        
        if context.args:
            location = ' '.join(context.args)
        else:
            location = self.user_sessions.get(user_id, {}).get('location')
            
        if not location:
            await update.message.reply_text(
                "Please provide a location or set your default location first.\n"
                "Example: `/weather Bangalore` or `/location Bangalore`",
                parse_mode='Markdown'
            )
            return
        
        try:
            await update.message.reply_text("🌤️ Fetching weather data...")
            weather_response = await agri_agent._handle_weather_query(
                f"What's the weather in {location}?",
                {"weather": await agri_agent.get_weather_data(location)},
                {}
            )
            await update.message.reply_text(weather_response)
        except Exception as e:
            logger.error(f"Weather command error: {e}")
            await update.message.reply_text("Sorry, I couldn't fetch weather data. Please try again.")

    async def prices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /prices command"""
        try:
            commodity = None
            if context.args:
                commodity = ' '.join(context.args)
            
            await update.message.reply_text("💰 Fetching market prices...")
            
            price_response = await agri_agent._handle_market_query(
                f"What are the prices for {commodity}?" if commodity else "Show me market prices",
                {"prices": await agri_agent.get_commodity_prices(commodity)},
                {}
            )
            await update.message.reply_text(price_response)
        except Exception as e:
            logger.error(f"Prices command error: {e}")
            await update.message.reply_text("Sorry, I couldn't fetch price data. Please try again.")

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard button presses"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        if data == "weather":
            location = self.user_sessions.get(user_id, {}).get('location')
            if location:
                await query.message.reply_text("🌤️ Fetching weather data...")
                weather_response = await agri_agent._handle_weather_query(
                    f"What's the weather in {location}?",
                    {"weather": await agri_agent.get_weather_data(location)},
                    {}
                )
                await query.message.reply_text(weather_response)
            else:
                await query.message.reply_text(
                    "Please set your location first using `/location` command or by sharing your location.",
                    parse_mode='Markdown'
                )
                
        elif data == "prices":
            location = self.user_sessions.get(user_id, {}).get('location')
            await query.message.reply_text("💰 Fetching market prices...")
            price_response = await agri_agent._handle_market_query(
                "Show me current market prices",
                {"prices": await agri_agent.get_commodity_prices()},
                {}
            )
            await query.message.reply_text(price_response)
            
        elif data == "set_location":
            # Ask for location sharing
            from telegram import KeyboardButton, ReplyKeyboardMarkup
            keyboard = [[KeyboardButton("📍 Share My Location", request_location=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            
            await query.message.reply_text(
                "Please share your location in one of these ways:\n\n"
                "1️⃣ **Share your current location** by tapping the button below\n"
                "2️⃣ **Type your city name**: `/location Mumbai`\n\n"
                "This helps me provide accurate weather and market information for your area.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        elif data == "crop_advice":
            await query.message.reply_text(
                "🌱 **Crop Advice Available:**\n\n"
                "Ask me questions like:\n"
                "• 'When should I plant rice?'\n"
                "• 'Which wheat variety is best for my region?'\n"
                "• 'How to protect crops from pests?'\n"
                "• 'When should I irrigate my cotton?'\n\n"
                "Just type your question!",
                parse_mode='Markdown'
            )
            
        elif data == "schemes":
            finance_response = await agri_agent._handle_finance_query(
                "What government schemes are available for farmers?",
                {},
                self.user_sessions.get(user_id, {})
            )
            await query.message.reply_text(finance_response)
            
        elif data == "set_location":
            await query.message.reply_text(
                "📍 To set your location, use:\n"
                "`/location [your_city]`\n\n"
                "Example: `/location Mumbai`",
                parse_mode='Markdown'
            )
            
        elif data == "help":
            await self.help_command(update, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages from users"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # Get user context
        user_context = self.user_sessions.get(user_id, {})
        location = user_context.get('location')
        
        try:
            # Show typing indicator
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action='typing'
            )
            
            # Check if OpenAI is configured
            openai_key = os.getenv('OPENAI_API_KEY')
            if not openai_key or openai_key == 'your_openai_api_key_here':
                response = await self.handle_query_without_ai(message_text, location, user_context)
            else:
                # Process the query using the AI agent
                response = await agri_agent.process_query(
                    query=message_text,
                    location=location,
                    user_context=user_context
                )
            
            # Send response
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Message handling error: {e}")
            await update.message.reply_text(
                "I apologize, but I'm having trouble processing your request right now. "
                "Please try again or rephrase your question."
            )
    
    async def handle_query_without_ai(self, query: str, location: str, user_context: dict) -> str:
        """Handle queries when OpenAI is not configured"""
        query_lower = query.lower()
        
        # Import location extraction function from web module
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'web'))
        from main import extract_location_from_query
        
        # Extract location from query if not provided
        if not location:
            location = extract_location_from_query(query)
        
        # Weather queries
        if any(word in query_lower for word in ["weather", "temperature", "rain", "climate"]):
            if location:
                try:
                    weather_data = await agri_agent.get_weather_data(location)
                    if "error" not in weather_data:
                        current = weather_data.get("current", {})
                        return f"🌤️ Current Weather in {location}:\n\n" \
                               f"🌡️ Temperature: {current.get('temperature', 'N/A')}°C\n" \
                               f"☁️ Conditions: {current.get('description', 'N/A')}\n" \
                               f"💧 Humidity: {current.get('humidity', 'N/A')}%\n" \
                               f"💨 Wind Speed: {current.get('wind_speed', 'N/A')} m/s"
                    else:
                        return f"Sorry, I couldn't fetch weather data for {location}. Please check the location name."
                except Exception as e:
                    return f"Error fetching weather data: {str(e)}"
            else:
                return "Please specify a location for weather information. Example: 'weather in Mumbai' or use /location Mumbai first"
        
        # Price queries
        elif any(word in query_lower for word in ["price", "cost", "rate", "market"]):
            try:
                # Extract commodity if mentioned
                commodities = ["onion", "tomato", "potato", "rice", "wheat", "cotton", "sugarcane"]
                commodity = None
                for c in commodities:
                    if c in query_lower:
                        commodity = c
                        break
                
                price_data = await agri_agent.get_commodity_prices(commodity)
                if "error" not in price_data:
                    data = price_data.get("data", [])
                    if data:
                        response = "💰 Current Market Prices:\n\n"
                        for record in data[:5]:  # Show first 5 records
                            commodity_name = record.get("commodity", "Unknown")
                            market = record.get("market", "Unknown")  
                            price = record.get("modal_price", "N/A")
                            response += f"📈 {commodity_name} at {market}: ₹{price}/quintal\n"
                        return response
                    else:
                        return "No current price data available."
                else:
                    return "Sorry, I couldn't fetch price data at the moment."
            except Exception as e:
                return f"Error fetching price data: {str(e)}"
        
        # Irrigation queries
        elif any(word in query_lower for word in ["irrigate", "water", "irrigation"]):
            return ("🌱 **Irrigation Guidance:**\n\n"
                    "• Check soil moisture before watering\n"
                    "• Morning hours (6-8 AM) are best for irrigation\n"
                    "• Avoid watering during hot afternoon\n" 
                    "• Water deeply but less frequently for most crops\n"
                    "• Check weather forecast - avoid watering before rain\n\n"
                    "For specific crop advice, use /crop [crop_name]!")
        
        # Loan/finance queries
        elif any(word in query_lower for word in ["loan", "credit", "finance", "scheme", "subsidy"]):
            return ("💳 **Agricultural Finance Options:**\n\n"
                    "**Central Schemes:**\n"
                    "• PM-KISAN: ₹6,000/year direct income support\n"
                    "• KCC (Kisan Credit Card): Crop loans at 7% interest\n"
                    "• PMFBY: Crop insurance scheme\n\n"
                    "**How to Apply:**\n"
                    "• Visit nearest bank branch\n"
                    "• Contact local agricultural officer\n"
                    "• Apply online at pmkisan.gov.in\n\n"
                    "Required: Aadhaar, land records, bank account")
        
        # Crop queries
        elif any(word in query_lower for word in ["crop", "seed", "variety", "plant", "sow"]):
            return ("🌾 **Crop Selection Tips:**\n\n"
                    "• Consider your soil type (black, red, alluvial)\n"
                    "• Check rainfall pattern in your area\n"
                    "• Choose disease-resistant varieties\n"
                    "• Consider market demand and prices\n"
                    "• Consult local agricultural extension officer\n\n"
                    "Popular crops by season:\n"
                    "• Kharif: Rice, cotton, sugarcane\n"
                    "• Rabi: Wheat, mustard, gram")
        
        # General response
        else:
            return ("🌾 **BhoomiSetu Agricultural Advisor**\n\n"
                    "I can help you with:\n"
                    "• Weather forecasts - 'weather in [city]'\n"
                    "• Market prices - 'tomato prices'\n"
                    "• Irrigation advice - 'when to water crops'\n"
                    "• Government schemes - 'loan information'\n"
                    "• Crop guidance - 'which seeds to plant'\n\n"
                    "Try asking specific questions or use the menu buttons!")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors"""
        logger.error(f"Update {update} caused error {context.error}")

    def run(self):
        """Start the Telegram bot"""
        # Create application
        application = Application.builder().token(self.token).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("location", self.set_location))
        application.add_handler(CommandHandler("crop", self.set_crop))
        application.add_handler(CommandHandler("weather", self.weather_command))
        application.add_handler(CommandHandler("prices", self.prices_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        application.add_handler(MessageHandler(filters.LOCATION, self.handle_location))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_error_handler(self.error_handler)
        
        # Start bot
        print("🤖 BhoomiSetu Telegram Bot is starting...")
        print(f"🔗 Bot link: https://t.me/neokisan_bot")
        application.run_polling()

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
